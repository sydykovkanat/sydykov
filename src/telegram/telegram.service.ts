import { InjectQueue } from '@nestjs/bull';
import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import type { Queue } from 'bull';
import { TelegramClient } from 'telegram';
import { NewMessage, NewMessageEvent } from 'telegram/events';
import { StringSession } from 'telegram/sessions';
import { Api } from 'telegram/tl';

import { ConversationService } from '../conversation/conversation.service';
import { OwnerCommandsService } from '../conversation/owner-commands.service';
import { MESSAGE_QUEUE } from '../queue/shared-queue.module';
import { RateLimitService } from '../rate-limit/rate-limit.service';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly logger = new Logger(TelegramService.name);
  private client: TelegramClient;
  private readonly messageDelaySeconds: number;
  private readonly botName: string;
  private readonly ownerTelegramId?: string;

  constructor(
    private readonly configService: ConfigService,
    private readonly conversationService: ConversationService,
    private readonly ownerCommandsService: OwnerCommandsService,
    private readonly rateLimitService: RateLimitService,
    @InjectQueue(MESSAGE_QUEUE) private readonly messageQueue: Queue,
  ) {
    const apiId = this.configService.get<number>('telegram.apiId');
    const apiHash = this.configService.get<string>('telegram.apiHash');
    const sessionString = this.configService.get<string>(
      'telegram.sessionString',
    );

    this.messageDelaySeconds = this.configService.get<number>(
      'messageProcessing.delaySeconds',
      10,
    );

    this.botName = this.configService.get<string>('bot.name', '–∫–∞–Ω–∞—Ç–∏–∫');
    this.ownerTelegramId = this.configService.get<string>(
      'bot.ownerTelegramId',
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MTProto –∫–ª–∏–µ–Ω—Ç–∞
    const session = new StringSession(sessionString || '');
    this.client = new TelegramClient(session, apiId!, apiHash!, {
      connectionRetries: 5,
    });

    this.setupHandlers();
  }

  async onModuleInit() {
    try {
      await this.client.connect();
      this.logger.log('Telegram MTProto client connected successfully');

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const me = await this.client.getMe();
      this.logger.log(
        `Logged in as: ${me.firstName} ${me.lastName || ''} (@${(me as any).username || 'no username'})`,
      );
    } catch (error) {
      this.logger.error('Failed to connect Telegram MTProto client', error);
      throw error;
    }
  }

  private setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.client.addEventHandler(async (event: NewMessageEvent) => {
      try {
        const message = event.message;

        this.logger.log(message);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (–∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if (message.out) {
          await this.handleControlCommands(message);
          return;
        }

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        const peerId = message.peerId;
        if (!peerId || !(peerId instanceof Api.PeerUser)) {
          this.logger.debug(`Ignoring message from non-private chat`);
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const sender = await message.getSender();
        if (!sender || !(sender instanceof Api.User)) {
          this.logger.debug('Sender is not a user, ignoring');
          return;
        }

        const telegramId = BigInt(sender.id.toString());
        const username = (sender as any).username || undefined;
        const firstName = sender.firstName || '';
        const lastName = sender.lastName || undefined;
        const messageId = message.id;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageText = message.text || '';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–∏–ø—ã –º–µ–¥–∏–∞
        const imageBase64List: string[] = [];
        let hasPhoto = false;

        if (message.media) {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
          if (message.media instanceof Api.MessageMediaPhoto) {
            hasPhoto = true;
            try {
              // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ Buffer
              this.logger.debug('Downloading photo...');
              const buffer = await this.client.downloadMedia(message.media);

              if (buffer && Buffer.isBuffer(buffer)) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                const base64Image = buffer.toString('base64');
                imageBase64List.push(base64Image);
                this.logger.debug(
                  `Photo downloaded successfully (${buffer.length} bytes)`,
                );
              } else {
                this.logger.warn('Downloaded media is not a Buffer');
              }
            } catch (error) {
              this.logger.error('Failed to download photo', error);
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Å–∫–∞—á–∞–ª–æ—Å—å
            }
          } else {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞
            const mediaType = message.media.className;
            this.logger.debug(`Ignoring unsupported media type: ${mediaType}`);
            return;
          }
        }

        // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –ò–õ–ò —Å —Ñ–æ—Ç–æ
        if (!messageText && !hasPhoto) {
          this.logger.debug('Ignoring message without text and without photo');
          return;
        }

        // –ê–Ω—Ç–∏—Å–ø–∞–º: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        const finalImageBase64 =
          imageBase64List.length > 0 ? imageBase64List[0] : undefined;

        if (imageBase64List.length > 1) {
          this.logger.warn(
            `User sent ${imageBase64List.length} photos, using only the first one (anti-spam)`,
          );
        }

        this.logger.log(
          `Received message from ${firstName} (${telegramId}): "${messageText.substring(0, 50)}${messageText.length > 50 ? '...' : ''}" ${hasPhoto ? '[with photo]' : ''}`,
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        const rateLimitStatus =
          await this.rateLimitService.checkLimit(telegramId);

        if (rateLimitStatus.exceeded) {
          // –ï—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          if (!rateLimitStatus.warningSent) {
            const warningMessage = this.configService.get<string>(
              'rateLimit.warningMessage',
              '–Ø —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç, —á—É—Ç—å –ø–æ–∑–∂–µ –æ—Ç–≤–µ—á—É üôè',
            );

            await this.sendMessage(Number(sender.id), warningMessage);
            await this.rateLimitService.markWarningSent(telegramId);

            this.logger.warn(
              `Rate limit exceeded for ${telegramId} (${rateLimitStatus.currentCount}/${rateLimitStatus.limit}). Warning sent.`,
            );
          } else {
            this.logger.debug(
              `Rate limit exceeded for ${telegramId}, ignoring message (warning already sent)`,
            );
          }

          // –ù–ï —á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
          return;
        }

        // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ (–ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω)
        await this.rateLimitService.incrementCounter(telegramId);

        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.conversationService.findOrCreateUser(
          telegramId,
          username,
          firstName,
          lastName,
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —á–∞—Ç –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ
        const isIgnored = await this.conversationService.isConversationIgnored(
          user.id,
        );
        if (isIgnored) {
          this.logger.debug(
            `Conversation with ${telegramId} is ignored, skipping message`,
          );
          // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
          await this.markAsRead(Number(sender.id));
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º owner commands –¥–ª—è Saved Messages (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Å–µ–±–µ)
        let isOwnerMessage = false;
        if (this.ownerTelegramId && messageText) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Saved Messages (savedPeerId –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
          const savedPeerId = (message as any).savedPeerId;
          if (savedPeerId && savedPeerId instanceof Api.PeerUser) {
            const savedUserId = BigInt(savedPeerId.userId.toString());

            // –ï—Å–ª–∏ savedPeerId === OWNER_TELEGRAM_ID, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ–±–µ
            if (savedUserId.toString() === this.ownerTelegramId) {
              this.logger.debug(
                'Checking for owner commands in Saved Messages...',
              );

              const commandResult =
                await this.ownerCommandsService.handleOwnerCommand(
                  savedUserId, // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
                  telegramId, // ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ Saved Messages —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–ª–∞–¥–µ–ª–µ—Ü)
                  messageText,
                );

              if (commandResult.isCommand && commandResult.response) {
                this.logger.log(
                  `Processing owner command in Saved Messages: ${messageText.substring(0, 50)}...`,
                );

                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç message
                await message.edit({ text: commandResult.response });

                // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                await this.markAsRead(Number(sender.id));

                // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
                return;
              }

              // –§–ª–∞–≥ isOwnerMessage –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI
              isOwnerMessage = commandResult.isOwnerMessage;
            } else {
              this.logger.debug(
                `Saved message from non-owner user ${savedUserId}, processing normally`,
              );
            }
          } else {
            // –û–±—ã—á–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏ —ç—Ç–æ
            this.logger.debug(
              `Normal private chat message from ${telegramId}, checking for owner commands`,
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º owner commands –≤ –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
            const commandResult =
              await this.ownerCommandsService.handleOwnerCommand(
                BigInt(sender.id.toString()), // ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü)
                telegramId, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ (—Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
                messageText,
              );

            if (commandResult.isCommand && commandResult.response) {
              this.logger.log(
                `Processing owner command in chat: ${messageText.substring(0, 50)}...`,
              );

              // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç message
              await message.edit({ text: commandResult.response });

              // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
              await this.markAsRead(Number(sender.id));

              // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
              return;
            }

            // –§–ª–∞–≥ isOwnerMessage –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI
            isOwnerMessage = commandResult.isOwnerMessage;
          }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ pending
        this.logger.debug(
          `Saving pending message for ${telegramId}, isOwnerMessage=${isOwnerMessage}`,
        );
        await this.conversationService.savePendingMessage(
          user.id,
          telegramId,
          messageText,
          messageId,
          this.messageDelaySeconds,
          [], // imageUrls deprecated
          finalImageBase64,
          isOwnerMessage,
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã
        // (—Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ - –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å)
        const minDelaySeconds = 2;
        await this.messageQueue.add(
          'process-message',
          {
            userId: user.id,
            telegramId: Number(sender.id),
          },
          {
            delay: minDelaySeconds * 1000,
            jobId: `${user.id}-${Date.now()}`,
          },
        );

        this.logger.debug(
          `Added message to queue with ${minDelaySeconds}s initial delay (will wait for typing to stop)`,
        );

        // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ 0.5-1 —Å–µ–∫—É–Ω–¥—É (–±—ã—Å—Ç—Ä–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ - –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ
        this.markAsReadWithDelay(Number(sender.id), 0.5, 1).catch((err) => {
          this.logger.error('Failed to mark as read with delay', err);
        });
      } catch (error) {
        this.logger.error('Error handling message', error);
      }
    }, new NewMessage({}));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç..." (UpdateUserTyping)
    this.client.addEventHandler(async (update: any) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ UpdateUserTyping
        if (!(update instanceof Api.UpdateUserTyping)) {
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = update.userId;
        if (!userId) return;

        const telegramId = BigInt(userId.toString());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (typing, recording voice, etc.)
        const action = update.action;

        if (action instanceof Api.SendMessageTypingAction) {
          // –û—Ç–º–µ—á–∞–µ–º –≤ Redis —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç (–±–µ–∑ –ª–æ–≥–æ–≤ - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)
          await this.rateLimitService.setUserTyping(telegramId);
        } else if (action instanceof Api.SendMessageCancelAction) {
          // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å (–±–µ–∑ –ª–æ–≥–æ–≤ - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)
          await this.rateLimitService.clearUserTyping(telegramId);
        }
      } catch (error) {
        this.logger.error('Error handling typing status', error);
      }
    });

    // Graceful shutdown
    const shutdown = async () => {
      this.logger.log('Disconnecting Telegram client...');
      await this.client.disconnect();
      process.exit(0);
    };

    process.once('SIGINT', shutdown);
    process.once('SIGTERM', shutdown);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç–º–µ–Ω—è–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç + owner commands
   */
  private async handleControlCommands(message: any): Promise<void> {
    try {
      const text: string = (message.text || '').trim();
      const lowerText = text.toLowerCase();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
      const peerId = message.peerId;
      if (!peerId || !(peerId instanceof Api.PeerUser)) {
        this.logger.debug(`Outgoing message not in private chat, ignoring`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ peerId
      const chatId = peerId.userId;
      const telegramId = BigInt(chatId.toString());

      this.logger.debug(
        `Outgoing message to ${telegramId}: "${text.substring(0, 50)}..."`,
      );

      // ===== –í–ê–ñ–ù–û: –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø—Ä–∏ –ª—é–±–æ–º –∏—Å—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ =====
      // –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–∞–º –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –æ–Ω —Å–∞–º –æ—Ç–≤–µ—á–∞–µ—Ç - –æ—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
      try {
        // –ò—â–µ–º pending —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ telegramId
        const pendingMessages =
          await this.conversationService.findPendingMessagesByTelegramId(
            telegramId,
          );

        if (pendingMessages.length > 0) {
          this.logger.log(
            `Owner sent message to ${telegramId}, cancelling ${pendingMessages.length} pending auto-responses`,
          );

          const pendingIds = pendingMessages.map((msg) => msg.id);
          await this.conversationService.markPendingMessagesAsProcessed(
            pendingIds,
          );
        }

        // ===== –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –ë–î =====
        // –ß—Ç–æ–±—ã GPT –≤–∏–¥–µ–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç - —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª
        if (text) {
          const user = await this.conversationService.findOrCreateUser(
            telegramId,
            undefined, // username –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            undefined, // firstName –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            undefined, // lastName –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
          );

          const conversation =
            await this.conversationService.findOrCreateConversation(user.id);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ assistant (–æ—Ç–≤–µ—Ç –±–æ—Ç–∞)
          await this.conversationService.saveMessage(
            conversation.id,
            'assistant',
            text,
          );

          this.logger.debug(
            `Saved outgoing message to DB for context: "${text.substring(0, 50)}..."`,
          );
        }
      } catch (error) {
        this.logger.error(
          `Failed to cancel auto-response for ${telegramId}`,
          error,
        );
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
      }

      // ===== –ü—Ä–æ–≤–µ—Ä—è–µ–º owner commands (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å botName –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏) =====
      if (!lowerText.includes(this.botName.toLowerCase())) {
        return; // –ù–µ—Ç botName - —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
      }

      this.logger.debug(
        `Found '${this.botName}' in message, checking for owner commands...`,
      );

      this.logger.debug(`Processing command for chat ${telegramId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º owner commands (–µ—Å–ª–∏ OWNER_TELEGRAM_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —ç—Ç–æ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É)
      if (this.ownerTelegramId) {
        const fromId = message.fromId;
        const myTelegramId =
          fromId && fromId instanceof Api.PeerUser
            ? BigInt(fromId.userId.toString())
            : null;

        // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ (myTelegramId === OWNER_TELEGRAM_ID)
        if (myTelegramId?.toString() === this.ownerTelegramId) {
          this.logger.debug('Checking for owner commands...');

          const commandResult =
            await this.ownerCommandsService.handleOwnerCommand(
              myTelegramId, // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
              telegramId, // ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–º–∞–Ω–¥ —Å—Ç–æ–ø/–ø—Ä–æ–¥–æ–ª–∂–∞–π)
              text,
            );

          if (commandResult.isCommand && commandResult.response) {
            this.logger.log(
              `Processing owner command: ${text.substring(0, 50)}...`,
            );

            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç message
            await message.edit({ text: commandResult.response });

            return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ "—Å—Ç–æ–ø/–ø—Ä–æ–¥–æ–ª–∂–∞–π"
          }

          // –ï—Å–ª–∏ —ç—Ç–æ owner message (—Å botName), –Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–æ–ø/–ø—Ä–æ–¥–æ–ª–∂–∞–π
          if (commandResult.isOwnerMessage) {
            this.logger.debug(
              'Unknown owner command, skipping stop/continue check',
            );
            return;
          }
        }
      }

      // –í—Å–µ –∫–æ–º–∞–Ω–¥—ã (–≤–∫–ª—é—á–∞—è —Å—Ç–æ–ø/–ø—Ä–æ–¥–æ–ª–∂–∞–π) —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ owner commands
      // –≠—Ç–∞ –≤–µ—Ç–∫–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
      // 1. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å botName
      // 2. –≠—Ç–æ –ù–ï owner command (–∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞)
      // 3. –≠—Ç–æ –ù–ï owner message
      // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.logger.debug(
        `Message contains bot name but not processed as command`,
      );
    } catch (error) {
      this.logger.error('‚ùå Error handling control commands', error);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async setTyping(telegramId: number, isTyping: boolean = true): Promise<void> {
    try {
      if (isTyping) {
        await this.client.invoke(
          new Api.messages.SetTyping({
            peer: telegramId,
            action: new Api.SendMessageTypingAction(),
          }),
        );
      }
    } catch (error) {
      this.logger.error(`Failed to set typing status for ${telegramId}`, error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–∏–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ–º)
   * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param minDelay - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
   * @param maxDelay - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
   */
  async markAsReadWithDelay(
    telegramId: number,
    minDelay: number = 3,
    maxDelay: number = 5,
  ): Promise<void> {
    try {
      // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É min –∏ max —Å–µ–∫—É–Ω–¥–∞–º–∏
      const delaySeconds = Math.random() * (maxDelay - minDelay) + minDelay;
      const delayMs = Math.floor(delaySeconds * 1000);

      // –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
      await new Promise((resolve) => setTimeout(resolve, delayMs));

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
      await this.client.invoke(
        new Api.messages.ReadHistory({
          peer: telegramId,
          maxId: 0, // 0 –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        }),
      );
    } catch (error) {
      this.logger.error(
        `Failed to mark messages as read for ${telegramId}`,
        error,
      );
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
   */
  async markAsRead(telegramId: number): Promise<void> {
    try {
      await this.client.invoke(
        new Api.messages.ReadHistory({
          peer: telegramId,
          maxId: 0, // 0 –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        }),
      );
    } catch (error) {
      this.logger.error(
        `Failed to mark messages as read for ${telegramId}`,
        error,
      );
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendMessage(telegramId: number, text: string): Promise<void> {
    try {
      await this.client.sendMessage(telegramId, {
        message: text,
      });
    } catch (error) {
      this.logger.error(`Failed to send message to ${telegramId}`, error);
      throw error;
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∞—Ç–∞)
   * @param messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param text - –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async editMessage(
    telegramId: number,
    messageId: number,
    text: string,
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      // –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      const entity = await this.client.getEntity(telegramId);

      await this.client.editMessage(entity, {
        message: messageId,
        text: text,
      });
    } catch (error) {
      this.logger.error(
        `Failed to edit message ${messageId} in chat ${telegramId}`,
        error,
      );
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ä–µ–∞–∫—Ü–∏—è
   * @param emoji - –≠–º–æ–¥–∑–∏ —Ä–µ–∞–∫—Ü–∏–∏ (üëç‚ù§Ô∏èüî•üéâüëèüòÅ)
   */
  async sendReaction(
    telegramId: number,
    messageId: number,
    emoji: string,
  ): Promise<void> {
    try {
      await this.client.invoke(
        new Api.messages.SendReaction({
          peer: telegramId,
          msgId: messageId,
          reaction: [new Api.ReactionEmoji({ emoticon: emoji })],
        }),
      );
    } catch (error) {
      this.logger.error(
        `Failed to send reaction to ${telegramId} on message ${messageId}`,
        error,
      );
      throw error;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
   */
  getClient(): TelegramClient {
    return this.client;
  }
}
