import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';

import { PrismaService } from '../database/prisma.service';

import { ConversationService } from './conversation.service';

export interface CommandResult {
  isCommand: boolean; // true –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ AI)
  response?: string; // –û—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ isCommand === true)
  isOwnerMessage: boolean; // true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç botName –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞)
}

@Injectable()
export class OwnerCommandsService {
  private readonly logger = new Logger(OwnerCommandsService.name);
  private readonly botName: string;
  private readonly ownerTelegramId?: string;

  constructor(
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService,
    private readonly conversationService: ConversationService,
  ) {
    this.botName = this.configService.get<string>('bot.name', '–∫–∞–Ω–∞—Ç–∏–∫');
    this.ownerTelegramId = this.configService.get<string>(
      'bot.ownerTelegramId',
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
   * @param ownerTelegramId - ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
   * @param targetTelegramId - ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–º–∞–Ω–¥ —Å—Ç–æ–ø/–ø—Ä–æ–¥–æ–ª–∂–∞–π)
   * @param messageText - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async handleOwnerCommand(
    ownerTelegramId: bigint,
    targetTelegramId: bigint,
    messageText: string,
  ): Promise<CommandResult> {
    // –ï—Å–ª–∏ OWNER_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    if (!this.ownerTelegramId) {
      return { isCommand: false, isOwnerMessage: false };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü
    if (ownerTelegramId.toString() !== this.ownerTelegramId) {
      return { isCommand: false, isOwnerMessage: false };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –±–æ—Ç–∞
    const lowerText = messageText.toLowerCase().trim();
    const lowerBotName = this.botName.toLowerCase();

    if (!lowerText.includes(lowerBotName)) {
      return { isCommand: false, isOwnerMessage: false };
    }

    // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞
    this.logger.debug(`Processing owner message: ${messageText}`);

    // –£–±–∏—Ä–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏ –∑–∞–ø—è—Ç—É—é, –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
    const commandText = lowerText
      .replace(lowerBotName, '')
      .replace(/^[,\s]+/, '')
      .replace(/[,\s]+$/, '')
      .trim();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    let response: string | undefined;

    if (
      this.matchesCommand(commandText, [
        '–∞–π–¥–∏',
        '–º–æ–π –∞–π–¥–∏',
        '–∞–π–¥–∏ —á–∞—Ç–∞',
        '–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'id',
        'my id',
      ])
    ) {
      response = this.handleGetId(ownerTelegramId);
    } else if (
      this.matchesCommand(commandText, [
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        '–º–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ',
        '–∏–Ω—Ñ–æ',
        'info',
      ])
    ) {
      response = await this.handleGetInfo(targetTelegramId);
    } else if (
      this.matchesCommand(commandText, [
        '–∫–æ–º–∞–Ω–¥—ã',
        '—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
        '–ø–æ–º–æ—â—å',
        'help',
        'commands',
      ])
    ) {
      response = this.handleGetCommands();
    } else if (
      this.matchesCommand(commandText, ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç–∞', 'stats'])
    ) {
      response = await this.handleGetStats(ownerTelegramId);
    } else if (
      commandText.startsWith('—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ') ||
      commandText.startsWith('set context ')
    ) {
      const context = commandText
        .replace(/^—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç /, '')
        .replace(/^set context /, '')
        .trim();
      response = await this.handleSetContext(targetTelegramId, context);
    } else if (
      this.matchesCommand(commandText, [
        '–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç',
        '—É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç',
        'clear context',
      ])
    ) {
      response = await this.handleClearContext(targetTelegramId);
    } else if (
      this.matchesCommand(commandText, [
        '–∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç',
        '—Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö',
        'ignored list',
      ])
    ) {
      response = await this.handleGetIgnoredList();
    } else if (
      this.matchesCommand(commandText, ['—Å—Ç–æ–ø', '—Å—Ç–æ–ø –∫–∞–Ω–∞—Ç–∏–∫', 'stop'])
    ) {
      response = await this.handleStopChat(targetTelegramId);
    } else if (
      this.matchesCommand(commandText, [
        '–ø—Ä–æ–¥–æ–ª–∂–∞–π',
        '–ø—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–Ω–∞—Ç–∏–∫',
        'continue',
      ])
    ) {
      response = await this.handleContinueChat(targetTelegramId);
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É AI
      this.logger.debug(
        `Unknown owner command "${commandText}", will be processed by AI`,
      );
      return { isCommand: false, isOwnerMessage: true };
    }

    // –ò–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
    return { isCommand: true, isOwnerMessage: true, response };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  private matchesCommand(commandText: string, variants: string[]): boolean {
    return variants.some((variant) => commandText === variant);
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: –ø–æ–ª—É—á–∏—Ç—å Telegram ID
   */
  private handleGetId(telegramId: bigint): string {
    return `–¢–≤–æ–π Telegram ID: \`${telegramId}\``;
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async handleGetInfo(telegramId: bigint): Promise<string> {
    const user = await this.prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.';
    }

    let info = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n`;
    info += `Telegram ID: \`${telegramId}\`\n`;
    info += `Username: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
    info += `–ò–º—è: ${user.firstName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} ${user.lastName || ''}\n`;
    info += `–°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString('ru-RU')}\n\n`;

    if (user.customContext) {
      info += `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n${user.customContext}`;
    } else {
      info += `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`;
    }

    return info;
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
   */
  private handleGetCommands(): string {
    return `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:

üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, –∞–π–¥–∏\` - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π Telegram ID
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç [—Ç–µ–∫—Å—Ç]\` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\` - —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

üö´ –ò–≥–Ω–æ—Ä-–ª–∏—Å—Ç
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç\` - —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —á–∞—Ç–æ–≤
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, —Å—Ç–æ–ø\` - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–π\` - —É–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞

‚ùì –ü–æ–º–æ—â—å
‚Ä¢ \`–∫–∞–Ω–∞—Ç–∏–∫, –∫–æ–º–∞–Ω–¥—ã\` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫

**–î—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã:** –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–∫–∞–Ω–∞—Ç–∏–∫, [—á—Ç–æ —É–≥–æ–¥–Ω–æ]" –∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ - –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ AI –∫–∞–∫ –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.`;
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
   */
  private async handleGetStats(telegramId: bigint): Promise<string> {
    const user = await this.prisma.user.findUnique({
      where: { telegramId },
      include: {
        conversations: {
          include: {
            messages: true,
          },
        },
      },
    });

    if (!user) {
      return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.';
    }

    const totalConversations = user.conversations.length;
    const totalMessages = user.conversations.reduce(
      (sum, conv) => sum + conv.messages.length,
      0,
    );
    const userMessages = user.conversations.reduce(
      (sum, conv) =>
        sum + conv.messages.filter((msg) => msg.role === 'user').length,
      0,
    );
    const assistantMessages = user.conversations.reduce(
      (sum, conv) =>
        sum + conv.messages.filter((msg) => msg.role === 'assistant').length,
      0,
    );

    let stats = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`;
    stats += `–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${totalConversations}\n`;
    stats += `–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalMessages}\n`;
    stats += `‚îú‚îÄ –¢–≤–æ–∏—Ö: ${userMessages}\n`;
    stats += `‚îî‚îÄ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${assistantMessages}\n`;

    return stats;
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  private async handleSetContext(
    telegramId: bigint,
    context: string,
  ): Promise<string> {
    if (!context || context.trim().length === 0) {
      return '–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n\n–ü—Ä–∏–º–µ—Ä: `–∫–∞–Ω–∞—Ç–∏–∫, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≠—Ç–æ –º–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å`';
    }

    await this.prisma.user.update({
      where: { telegramId },
      data: { customContext: context },
    });

    this.logger.log(
      `Updated custom context for user ${telegramId}: ${context.substring(0, 50)}...`,
    );

    return `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n${context}`;
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: –æ—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  private async handleClearContext(telegramId: bigint): Promise<string> {
    await this.prisma.user.update({
      where: { telegramId },
      data: { customContext: null },
    });

    this.logger.log(`Cleared custom context for user ${telegramId}`);

    return '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω.';
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —á–∞—Ç–æ–≤
   */
  private async handleGetIgnoredList(): Promise<string> {
    const ignoredConversations = await this.prisma.conversation.findMany({
      where: { isIgnored: true },
      include: {
        user: true,
      },
    });

    if (ignoredConversations.length === 0) {
      return '–ò–≥–Ω–æ—Ä-–ª–∏—Å—Ç –ø—É—Å—Ç.';
    }

    let list = `–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —á–∞—Ç—ã (${ignoredConversations.length}):\n\n`;
    for (const conv of ignoredConversations) {
      const username = conv.user.username ? `@${conv.user.username}` : '';
      const name = [conv.user.firstName, conv.user.lastName]
        .filter(Boolean)
        .join(' ');
      list += `‚Ä¢ ${name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} ${username}\n`;
      list += `  ID: \`${conv.user.telegramId}\`\n\n`;
    }

    return list;
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
   */
  private async handleStopChat(telegramId: bigint): Promise<string> {
    const user = await this.prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
    }

    await this.conversationService.setConversationIgnored(user.id, true);

    this.logger.log(`Chat with ${telegramId} added to ignore list`);

    return '–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç. –Ø –Ω–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.';
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
   */
  private async handleContinueChat(telegramId: bigint): Promise<string> {
    const user = await this.prisma.user.findUnique({
      where: { telegramId },
    });

    if (!user) {
      return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
    }

    await this.conversationService.setConversationIgnored(user.id, false);

    this.logger.log(`Chat with ${telegramId} removed from ignore list`);

    return '–ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞. –Ø —Å–Ω–æ–≤–∞ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.';
  }
}
