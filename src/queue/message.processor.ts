import { Process, Processor } from '@nestjs/bull';
import { Logger } from '@nestjs/common';
import type { Job } from 'bull';

import { ConversationService } from '../conversation/conversation.service';
import { OpenAIService } from '../openai/openai.service';
import { TelegramService } from '../telegram/telegram.service';

import { MESSAGE_QUEUE } from './shared-queue.module';

export interface MessageJob {
  userId: string;
  telegramId: number;
}

@Processor(MESSAGE_QUEUE)
export class MessageProcessor {
  private readonly logger = new Logger(MessageProcessor.name);

  constructor(
    private readonly conversationService: ConversationService,
    private readonly openaiService: OpenAIService,
    private readonly telegramService: TelegramService,
  ) {}

  @Process('process-message')
  async handleMessage(job: Job<MessageJob>) {
    this.logger.log(
      `Processing message job ${job.id} for user ${job.data.userId}`,
    );

    try {
      const { userId, telegramId } = job.data;

      // 0. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —á–∞—Ç –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ
      const isIgnored =
        await this.conversationService.isConversationIgnored(userId);
      if (isIgnored) {
        this.logger.debug(
          `Conversation with user ${userId} is ignored, skipping processing`,
        );
        // –ü–æ–º–µ—á–∞–µ–º pending —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–ª–∏—Å—å
        const pendingMessages =
          await this.conversationService.getPendingMessages(userId);
        if (pendingMessages.length > 0) {
          const pendingMessageIds = pendingMessages.map((msg) => msg.id);
          await this.conversationService.markPendingMessagesAsProcessed(
            pendingMessageIds,
          );
        }
        return { success: true, ignored: true };
      }

      // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PendingMessage
      const pendingMessages =
        await this.conversationService.getPendingMessages(userId);

      if (pendingMessages.length === 0) {
        this.logger.debug(`No pending messages for user ${userId}`);
        return { success: true };
      }

      this.logger.debug(`Found ${pendingMessages.length} pending messages`);

      // 2. –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥
      const conversation =
        await this.conversationService.findOrCreateConversation(userId);

      // 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ pending —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥
      for (const pendingMsg of pendingMessages) {
        await this.conversationService.saveMessage(
          conversation.id,
          'user',
          pendingMsg.content,
          pendingMsg.telegramMessageId,
          pendingMsg.imageUrls,
          pendingMsg.imageBase64 || undefined,
        );
      }

      // 4. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (summary + –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
      const contextMessages =
        await this.conversationService.getConversationContext(conversation.id);

      // 5. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
      this.logger.debug(`Sending ${contextMessages.length} messages to OpenAI`);
      const aiResponse =
        await this.openaiService.generateResponse(contextMessages);

      // 7. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ (—Ä–µ–∞–∫—Ü–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç)
      if (aiResponse.responseType === 'reaction') {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–º–æ–¥–∑–∏ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        const allowedReactions = ['üëç', '‚ù§Ô∏è', '‚ù§', 'üî•', 'üéâ', 'üëè', 'üòÅ'];
        if (!allowedReactions.includes(aiResponse.content)) {
          this.logger.warn(
            `GPT chose invalid reaction: ${aiResponse.content}. Falling back to text response.`,
          );
          // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–∫—Ü–∏–∏
          const fallbackText = aiResponse.content === 'üëã' ? '–π–æ—É' : '–æ–∫';
          await this.conversationService.saveMessage(
            conversation.id,
            'assistant',
            fallbackText,
          );
          await this.telegramService.sendMessage(telegramId, fallbackText);
        } else {
          // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏
          const lastPendingMessage =
            pendingMessages[pendingMessages.length - 1];
          if (!lastPendingMessage?.telegramMessageId) {
            this.logger.error(
              'Cannot send reaction: no telegram message ID found',
            );
            throw new Error('Missing telegram message ID for reaction');
          }

          try {
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
            this.logger.log(
              `Sending reaction ${aiResponse.content} to message ${lastPendingMessage.telegramMessageId}`,
            );
            await this.telegramService.sendReaction(
              telegramId,
              lastPendingMessage.telegramMessageId,
              aiResponse.content,
            );

            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –≤ –ë–î –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            await this.conversationService.saveMessage(
              conversation.id,
              'assistant',
              `[–†–µ–∞–∫—Ü–∏—è: ${aiResponse.content}]`,
            );
          } catch (error) {
            // Fallback: –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            this.logger.warn(
              `Failed to send reaction, falling back to text response`,
              error,
            );
            const fallbackText = '–æ–∫';
            await this.conversationService.saveMessage(
              conversation.id,
              'assistant',
              fallbackText,
            );
            await this.telegramService.sendMessage(telegramId, fallbackText);
          }
        }
      } else {
        // –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑–∞—Ç—å "–ø–µ—á–∞—Ç–∞–µ—Ç..." –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        await this.telegramService.setTyping(telegramId, true);

        await this.conversationService.saveMessage(
          conversation.id,
          'assistant',
          aiResponse.content,
        );

        await this.telegramService.sendMessage(telegramId, aiResponse.content);
      }

      // 9. –ü–æ–º–µ—Ç–∏—Ç—å pending —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
      const pendingMessageIds = pendingMessages.map((msg) => msg.id);
      await this.conversationService.markPendingMessagesAsProcessed(
        pendingMessageIds,
      );

      // 10. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
      await this.conversationService.summarizeConversation(conversation.id);

      this.logger.log(`Successfully processed message job ${job.id}`);
      return { success: true };
    } catch (error) {
      this.logger.error(`Failed to process message job ${job.id}`, error);
      throw error;
    }
  }
}
